## .NET and ASP.NET

#### Aula 1

- **.NET**: Plataforma de desenvolvimento com diversas ferramentas, linguagens de programação e bibliotecas que permitem o desenvolvimento de diversos tipos de aplicações.

  .NET Foundation

- 

  - Gratuita e de software livre
  - Plataforma cruzada
    - x64
    - x32
    - ARM32
    - ARM64
  - Tipos de implementação
    - .NET Framework
      - Windows
      - Linux
    - .NET Core
      - Mac
    - Xamarin
      - Mobile
  - Tipos de aplicação
    - Web
    - Mobile
    - Desktop
    - Microservices
    - Cloud
    - Machine Learning
    - Jogos
    - IOT

- .NET Standard

  - Especificação das APIs que são comuns às implementações .NET

- IDEs

  - Visual Studio
  - Visual Studio Code (Leve)
  - Codespaces (online)

- Linguagens de programação

  - C#
  - F#
  - Visual Basic

- Bibliotecas para desenvolvimento e execução de aplicações .NET

  - SDK
  - Runtime

- NUGET: Gerenciador de pacotes

- Acesso a dados

  - ORM -> Entity Framework Core
  - LINQ -> consulta integrada à linguagem

- Ambientes CI/CD

  - GitHub Actions
  - Azure Devops
  - Cake/Fake

- Gerenciamento Automático de memória

  

- **ASP.NET**: Framework que estende .NET para a criação de Web App's.

  - Aplicações Web (ASP.NET Core (atualização))

    - Páginas web
    - REST APIs
    - microservices
    - hubs

  - Processamento de requisições web (C# e F#)

  - Criação de páginas da web de forma dinâmica

  - Bibliotecas para *web patterns* (Model View Controller)

  - Sistema de autenticação

  - Extensões para produtividade

    

#### Aula 2

1.  Desenvolvimento multiplataforma com .NET: contexto e conceitos

   - Open-source e gratuito ->

     - Distribuição livre;

     - Acesso ao código-fonte;

     - Permissão para criação de trabalhos derivados;

     - Integridade do autor do código-fonte;

     - Não discriminação contra pessoas ou grupos;

     - Não discriminação contra áreas de atuação;

     - Distribuição da licença

     - Licença não específica a um produto;

     - Licença não restritiva a outros programas;

     - Licença neutra em relação à tecnologia.

       

   - Abordagem multiplataforma

     - .NET Framework
       - App models:
         - WPF
         - Windows Forms
         - ASP.NET
       - Base Libraries
         - .NET Framework Class Library
     - .NET Core
       - App models:
         - UWP
         - ASP.NET Core*
       - Base Libraries
         - CoreFx Class Library
     - Xamarin
       - App Models:
         - Xamarin iOS
         - Xamarin Android
         - Xamarin Forms
         - Xamarin Mac
       - Base Libraries
         - Mono Class Library
     - .NET Standard Library
     - Base Libraries
       - Platform Agnostic Assemblies
       - .NET Platform Standard (Contracts)

     - Common Infrastructure
       - Compilers
       - Languages
       - Runtime components

     

2. Entendendo .NET Framework

   - Focado no Windows
   - Componentes:
     - Common language runtime ( JIT - compilador )
     - .NET Class library
   - IDE vai traduzir pra Common Language Runtime e o JIT vai traduzir pra linguagem de máquina
   - Características
     - Gerenciamento de memória
     - Sistema de tipos comum -> Tipos definidos pelo próprio framework
     - Grande e específicas bibliotecas de classes utilitárias
       - ASP.NET (WEB)
       - ADO.NET (Acesso de dados)
       - WCF (Programação orientada a Serviços)
       - WPF (Desenvolvimento de aplicativos de área de trabalho)
     - Interoperabilidade entre linguagens
     - Compatibilidade de versões
     - Uso do .NET Standard

3. Entendendo .NET / .NET Core
   - Uma plataforma unificada pra tudo
   - .NET = .NET Core + .NET Framework + Xamarin + Mono
   - Modular e com melhor desempenho
   - Ciclos de lançamentos mais rápidos
   - ASP.NET Core
     - Construção de aplicações web, Iot apps e aplicações backend para mobile
     - Funcionalidades para construção de aplicações com renderização no servidor
       - Uso do MVC -> ASP.NET Core MVC
         - Uso de Padrão MVC (Model View Controller)
           1. Model: Representa o estado da aplicação, encapsulando lógica de negócio.
           2. View: Responsável por apresentar dados através de interface.
           3. Controller: Componentes que lidam com a interação do usuário a partir da View e trabalham com a model para apresentar respostas para o usuário.
         - Uso de padrão Model Binding
           1. Mapeamento automático de dados de requisições HTTP para parâmetros de métodos de ação
         - Uso de padrão Model Validation
           1. Validação automática no lado do cliente e servidor
         - Uso do padrão Razor Pages e Razor Markup
           1. Modelo baseado em páginas -> simplificado
           2. Interface e lógica de negócios são separados, mas dentro da página.
           3. Sintaxe de marcação para inserir código baseado em .NET em páginas WEB = Razor markup +C# + HTML 
         - Mecanismo que pode ser usado junto com os padrões anteriores são os **Tag helpers**
           1. Permite que o código do lado do servidor participe da criação e renderização de elementos HTML em arquivos Razor
           2. Experiência de desenvolvimento com HTML mais amigável
           3. IntelliSense no ambiente para sintaxe HTML e Razor
           4. Manutenção de código usando somente informações do servidor
       - Blazor
         - Framework para construir aplicativos do lado do cliente, que são executados direto no navegasdor com WebAssembly (WASM) usando C#.
         - Uso da interoperabilidade com Javascript para lidar com manipulação da DOM e chamadas de API.
         - Integração com frameworks como Angular, React e Bootstrap

4. Entendendo Xamarin

➔Plataforma para desenvolvimento de aplicações mobile modernas com alto desempenho 

➔Baseado no projeto Mono, implementação open source baseada no .NET Framework

➔Criação de interface nativa em cada plataforma(Android, iOS, MacOS e Windows apps) e código de lógica compartilhado

➔Possui todos os benefícios já citados da plataforma .NET

★Framework open source para desenvolvimento de interfaces para o usuário

★Aplicativos Android, iOS e Windows com única base de código

★Criação de UI com XAML e lógica com C# (**XAML: Extensible Application Markup Language**)

★Uso de biblioteca Xamarin.Essentials

- informações de dispositivos

- sistema de arquivos

- acelerômetro

- bloqueio de tela…

ANDROID

★Compilação de C# para LI ( linguagem intermediária), que por sua vez é Compilado para assembly nativo no momento da execução

★Executado no ambiente Mono + ART

iOS

★Compilação total de C# para código assembly nativo 

★Executado no ambiente Mono + AOT( ahead of time)

★Restrição de segurança: sem permissão para execução de código gerado dinamicamente.

#### Aula 3

1. O que é escrever um bom código?

   - Ser confiável

   - Ser sustentável

   - Ser eficiente

     Deve ser equilibrado juntando Eficiência e desempenho com confiabilidade e facilidade

2. Por que e como devemos padronizar?

   - Melhorar comunicação entre a equipe
   - Facilitar a manutenção de códigos
   - Utilizar documentação e boas práticas de codificação, como clean code

3. Entendendo o Clean Code:

   - Conjunto de boas práticas na escrita de software para obtenção de maior legibilidade e facilidade de manutenção de código
   - Regras gerais:
     - Siga SEMPRE as convenções adotadas pela equipe
     - KISS : Keep It Stupid Simple (Mantenha isso estupidamente simples)
     - Devolva o código mais limpo do que você o encontrou
     - Busque sempre entender e solucionar os problemas a partir de sua raiz
   - Regras para entendimento de código
     - Seja consistente na escrita de todo o código
     - Utilize variáveis concisas e que realmente passem a informação necessária
     - Observe a necessidade de criação de objetos de valor ao invés do uso de tipos primitivos
     - Evite dependências lógicas
     - Evite condicionais negativas
   - Regras para nomeação
     - Escolher nomes descritivos para classes, variáveis e métodos
     - Para variáveis semelhantes, faça uma distinção identificável
     - Utilizar nomes de fácil leitura e busca
     - Utilize constantes para guardar strings a serem comparadas
     - Não use prefixos ou caracteres especiais
   - Regras para métodos
     - Métodos não devem ser grandes e devem possuir somente um objetivo/responsabilidade
     - Métodos devem possuir nomes descritivos
     - Evite a exigência de muitos parâmetros dentro do método
     - Evite que uma função altere valores de outra classe sem ser a própria classe
     - Evite utilização de flags desnecessárias
   - Regras para comentários
     - Evite comentários desnecessário, torne seu código autoexplicativo
     - Não seja redundante
     - Não deixe código desnecessário comentado
     - Comentários podem ser úteis para falar sobre a intenção de uma classe ou método
     - Comentários podem explanar regras mais complexas e alertas sobre consequências mais sérias
   - Regras para estruturação de código
     - Declare variáveis próximas de seu uso
     - Agrupe métodos similares
     - Declare funções de cima pra baixo
     - Mantenha poucas e curtas linhas
     - Use espaçamentos e identação corretamente

4. Convenções e nomenclatura

   - Camel Case

     - Escrever palavras ou frases compostas considerando a primeira letra da primeira palavra sempre minúscula e as subsequentes maiúsculas.

   - Pascal Case

     - Escrever palavras ou frases compostas considerando a primeira letra de cada palavra maiúscula

   - Padrão para C#

     - Não há uma regra obrigatória, porém grande maioria dos desenvolvedores convenciona da seguinte forma:
       - Nomes de classes e métodos -> PascalCase
       - Nomes de variáveis e parâmetros -> CamelCase
       - No caso de interfaces recomenda-se o uso do prefixo “ I “Ex: IEntidade, IRepositorioCliente

   - Recomendações da Microsoft

     - Uso do PascalCase

       - Classes
       - Interfaces
       - Membros de tipos públicos

     - Uso com CamelCase

       - Campos privados e internos 

         - deve-se ainda usá-los com prefixo “_”.

       - Campos estáticos privados ou internos

         - usar com prefixo “s_” 

         
