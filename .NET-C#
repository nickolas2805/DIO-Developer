## .NET and ASP.NET

#### Aula 1

- **.NET**: Plataforma de desenvolvimento com diversas ferramentas, linguagens de programação e bibliotecas que permitem o desenvolvimento de diversos tipos de aplicações.

  .NET Foundation

- 

  - Gratuita e de software livre
  - Plataforma cruzada
    - x64
    - x32
    - ARM32
    - ARM64
  - Tipos de implementação
    - .NET Framework
      - Windows
      - Linux
    - .NET Core
      - Mac
    - Xamarin
      - Mobile
  - Tipos de aplicação
    - Web
    - Mobile
    - Desktop
    - Microservices
    - Cloud
    - Machine Learning
    - Jogos
    - IOT

- .NET Standard

  - Especificação das APIs que são comuns às implementações .NET

- IDEs

  - Visual Studio
  - Visual Studio Code (Leve)
  - Codespaces (online)

- Linguagens de programação

  - C#
  - F#
  - Visual Basic

- Bibliotecas para desenvolvimento e execução de aplicações .NET

  - SDK
  - Runtime

- NUGET: Gerenciador de pacotes

- Acesso a dados

  - ORM -> Entity Framework Core
  - LINQ -> consulta integrada à linguagem

- Ambientes CI/CD

  - GitHub Actions
  - Azure Devops
  - Cake/Fake

- Gerenciamento Automático de memória

  

- **ASP.NET**: Framework que estende .NET para a criação de Web App's.

  - Aplicações Web (ASP.NET Core (atualização))

    - Páginas web
    - REST APIs
    - microservices
    - hubs

  - Processamento de requisições web (C# e F#)

  - Criação de páginas da web de forma dinâmica

  - Bibliotecas para *web patterns* (Model View Controller)

  - Sistema de autenticação

  - Extensões para produtividade

    

#### Aula 2

1.  Desenvolvimento multiplataforma com .NET: contexto e conceitos

   - Open-source e gratuito ->

     - Distribuição livre;

     - Acesso ao código-fonte;

     - Permissão para criação de trabalhos derivados;

     - Integridade do autor do código-fonte;

     - Não discriminação contra pessoas ou grupos;

     - Não discriminação contra áreas de atuação;

     - Distribuição da licença

     - Licença não específica a um produto;

     - Licença não restritiva a outros programas;

     - Licença neutra em relação à tecnologia.

       

   - Abordagem multiplataforma

     - .NET Framework
       - App models:
         - WPF
         - Windows Forms
         - ASP.NET
       - Base Libraries
         - .NET Framework Class Library
     - .NET Core
       - App models:
         - UWP
         - ASP.NET Core*
       - Base Libraries
         - CoreFx Class Library
     - Xamarin
       - App Models:
         - Xamarin iOS
         - Xamarin Android
         - Xamarin Forms
         - Xamarin Mac
       - Base Libraries
         - Mono Class Library
     - .NET Standard Library
     - Base Libraries
       - Platform Agnostic Assemblies
       - .NET Platform Standard (Contracts)

     - Common Infrastructure
       - Compilers
       - Languages
       - Runtime components

     

2. Entendendo .NET Framework

   - Focado no Windows
   - Componentes:
     - Common language runtime ( JIT - compilador )
     - .NET Class library
   - IDE vai traduzir pra Common Language Runtime e o JIT vai traduzir pra linguagem de máquina
   - Características
     - Gerenciamento de memória
     - Sistema de tipos comum -> Tipos definidos pelo próprio framework
     - Grande e específicas bibliotecas de classes utilitárias
       - ASP.NET (WEB)
       - ADO.NET (Acesso de dados)
       - WCF (Programação orientada a Serviços)
       - WPF (Desenvolvimento de aplicativos de área de trabalho)
     - Interoperabilidade entre linguagens
     - Compatibilidade de versões
     - Uso do .NET Standard

3. Entendendo .NET / .NET Core
   - Uma plataforma unificada pra tudo
   - .NET = .NET Core + .NET Framework + Xamarin + Mono
   - Modular e com melhor desempenho
   - Ciclos de lançamentos mais rápidos
   - ASP.NET Core
     - Construção de aplicações web, Iot apps e aplicações backend para mobile
     - Funcionalidades para construção de aplicações com renderização no servidor
       - Uso do MVC -> ASP.NET Core MVC
         - Uso de Padrão MVC (Model View Controller)
           1. Model: Representa o estado da aplicação, encapsulando lógica de negócio.
           2. View: Responsável por apresentar dados através de interface.
           3. Controller: Componentes que lidam com a interação do usuário a partir da View e trabalham com a model para apresentar respostas para o usuário.
         - Uso de padrão Model Binding
           1. Mapeamento automático de dados de requisições HTTP para parâmetros de métodos de ação
         - Uso de padrão Model Validation
           1. Validação automática no lado do cliente e servidor
         - Uso do padrão Razor Pages e Razor Markup
           1. Modelo baseado em páginas -> simplificado
           2. Interface e lógica de negócios são separados, mas dentro da página.
           3. Sintaxe de marcação para inserir código baseado em .NET em páginas WEB = Razor markup +C# + HTML 
         - Mecanismo que pode ser usado junto com os padrões anteriores são os **Tag helpers**
           1. Permite que o código do lado do servidor participe da criação e renderização de elementos HTML em arquivos Razor
           2. Experiência de desenvolvimento com HTML mais amigável
           3. IntelliSense no ambiente para sintaxe HTML e Razor
           4. Manutenção de código usando somente informações do servidor
       - Blazor
         - Framework para construir aplicativos do lado do cliente, que são executados direto no navegasdor com WebAssembly (WASM) usando C#.
         - Uso da interoperabilidade com Javascript para lidar com manipulação da DOM e chamadas de API.
         - Integração com frameworks como Angular, React e Bootstrap

4. Entendendo Xamarin

➔Plataforma para desenvolvimento de aplicações mobile modernas com alto desempenho 

➔Baseado no projeto Mono, implementação open source baseada no .NET Framework

➔Criação de interface nativa em cada plataforma(Android, iOS, MacOS e Windows apps) e código de lógica compartilhado

➔Possui todos os benefícios já citados da plataforma .NET

★Framework open source para desenvolvimento de interfaces para o usuário

★Aplicativos Android, iOS e Windows com única base de código

★Criação de UI com XAML e lógica com C# (**XAML: Extensible Application Markup Language**)

★Uso de biblioteca Xamarin.Essentials

- informações de dispositivos

- sistema de arquivos

- acelerômetro

- bloqueio de tela…

ANDROID

★Compilação de C# para LI ( linguagem intermediária), que por sua vez é Compilado para assembly nativo no momento da execução

★Executado no ambiente Mono + ART

iOS

★Compilação total de C# para código assembly nativo 

★Executado no ambiente Mono + AOT( ahead of time)

★Restrição de segurança: sem permissão para execução de código gerado dinamicamente.

#### Aula 3

1. O que é escrever um bom código?

   - Ser confiável

   - Ser sustentável

   - Ser eficiente

     Deve ser equilibrado juntando Eficiência e desempenho com confiabilidade e facilidade

2. Por que e como devemos padronizar?

   - Melhorar comunicação entre a equipe
   - Facilitar a manutenção de códigos
   - Utilizar documentação e boas práticas de codificação, como clean code

3. Entendendo o Clean Code:

   - Conjunto de boas práticas na escrita de software para obtenção de maior legibilidade e facilidade de manutenção de código
   - Regras gerais:
     - Siga SEMPRE as convenções adotadas pela equipe
     - KISS : Keep It Stupid Simple (Mantenha isso estupidamente simples)
     - Devolva o código mais limpo do que você o encontrou
     - Busque sempre entender e solucionar os problemas a partir de sua raiz
   - Regras para entendimento de código
     - Seja consistente na escrita de todo o código
     - Utilize variáveis concisas e que realmente passem a informação necessária
     - Observe a necessidade de criação de objetos de valor ao invés do uso de tipos primitivos
     - Evite dependências lógicas
     - Evite condicionais negativas
   - Regras para nomeação
     - Escolher nomes descritivos para classes, variáveis e métodos
     - Para variáveis semelhantes, faça uma distinção identificável
     - Utilizar nomes de fácil leitura e busca
     - Utilize constantes para guardar strings a serem comparadas
     - Não use prefixos ou caracteres especiais
   - Regras para métodos
     - Métodos não devem ser grandes e devem possuir somente um objetivo/responsabilidade
     - Métodos devem possuir nomes descritivos
     - Evite a exigência de muitos parâmetros dentro do método
     - Evite que uma função altere valores de outra classe sem ser a própria classe
     - Evite utilização de flags desnecessárias
   - Regras para comentários
     - Evite comentários desnecessário, torne seu código autoexplicativo
     - Não seja redundante
     - Não deixe código desnecessário comentado
     - Comentários podem ser úteis para falar sobre a intenção de uma classe ou método
     - Comentários podem explanar regras mais complexas e alertas sobre consequências mais sérias
   - Regras para estruturação de código
     - Declare variáveis próximas de seu uso
     - Agrupe métodos similares
     - Declare funções de cima pra baixo
     - Mantenha poucas e curtas linhas
     - Use espaçamentos e identação corretamente

4. Convenções e nomenclatura

   - Camel Case
     - Escrever palavras ou frases compostas considerando a primeira letra da primeira palavra sempre minúscula e as subsequentes maiúsculas.
   - Pascal Case
     - Escrever palavras ou frases compostas considerando a primeira letra de cada palavra maiúscula
   - Padrão para C#
     - Não há uma regra obrigatória, porém grande maioria dos desenvolvedores convenciona da seguinte forma:
       - Nomes de classes e métodos -> PascalCase
       - Nomes de variáveis e parâmetros -> CamelCase
       - No caso de interfaces recomenda-se o uso do prefixo “ I “Ex: IEntidade, IRepositorioCliente
   - Recomendações da Microsoft
     - Uso do PascalCase
       - Classes
       - Interfaces
       - Membros de tipos públicos
     - Uso com CamelCase
       - Campos privados e internos 
         - deve-se ainda usá-los com prefixo “_”.
       - Campos estáticos privados ou internos
         - usar com prefixo “s_” 

#### Aula 4

1. Ferramentas para desenvolvimento e utilitários

   - **IDE**: 

     - Visual Studio

     - JetBrains Rider

       ★Plataforma Cruzada, porém com licensa paga

       ★Desenvolvimento multiplataforma com .NET, ASP.NET, .NET Core, Xamarin, Unity, etc…

       ★Uso de tecnologia ReSharper para fornecer experiência semelhante às funcionalidades do Visual Studio -> [All Developer Tools and Products by JetBrains](https://www.jetbrains.com/products/)

   - **Editor de código**: Visual Studio Code

     ​	★Editor gratuito e mais leve com extensões que permitem o desenvolvimento rápido em qualquer linguagem

     ​	★Construído em cima da versão open source “Code - OSS”-> [microsoft](https://github.com/microsoft/vscode)[/](https://github.com/microsoft/vscode)[vscode](https://github.com/microsoft/vscode)[: Visual Studio Code (github.com)](https://github.com/microsoft/vscode)

     ​	★Multiplataforma

     ​	★Utilização de extensões de produtividade e suporte 

     ​	★Customizável

   - **Suíte de desenvolvimento integrada**: OmniSharp

     ★Experiência no desenvolvimento com .NET em diversos editores -> [OmniSharp](http://www.omnisharp.net/)[ - .NET and IntelliSense on any platform with your editor of choice](http://www.omnisharp.net/)

     ★Plataforma Cruzada

     ​	○Atom

     ​	○Brackets

     ​	○Sublime Text

     ​	○Emacs

     ​	○Vim

     ​	○Visual Studio Code

   - **Pacote de extensão**: IONIDE

     ★Extensão para VSCode que dá completo suporte para desenvolvimento com F# -> [Ionide](https://ionide.io/Editors/Code/overview.html)

     ★Plataforma cruzada e open source

   - **Console**: .NET Core CLI

     - ★Alternativa para desenvolvimento via console

       ★Bem útil para se trabalhar com Visual Studio Code

       ★Incluída no SDK do .NET

2. Linguagens suportadas pela plataforma .NET

   - C#

     -  [C# | Modern, open-source programming language for .NET (microsoft.com)](https://dotnet.microsoft.com/languages/csharp)
     - Mais popular
     - Desenvolvimento de qualquer tipo de aplicação, para execução em qualquer plataforma.
     - Open source
     - Baseada em C/C++, com influências bem fortes também do JAVA
     - Orientada a objetos 
       - Abstração do problema , transformando em objetos as entidades do “mundo real”

   - F#

     - [F# Software Foundation (fsharp.org)](https://fsharp.org/)

     - Linguagem open-source para escrita de código sucinto, robusto e com ótimo desempenho 

     - Com suporte em Windows, Linux e macOS

     - Mais utilizado para ciência de dados e aprendizagem de máquina

     - Permite **paradigma** **funcional**, imperativo e orientado a objetos

       - Enfatiza o uso de funções 

       - Expressões em vez de instruções

       - Valores imutáveis em variáveis

       - Programação declarativa sobre imperativa

   - Visual Basic

     - [index | TIOBE - The Software Quality Company](https://www.tiobe.com/tiobe-index/)
     - Aperfeiçoamento do BASIC, uma linguagem dirigida a eventos
     - Ainda consta como parte das linguagens utilizadas no mercado
     - Linguagens derivadas
       - VBScript: linguagem default no ASP( Active Server Pages)
       - Visual Basic .NET: Versão atual sem compatibilidade com versões antigas e orientada a objetos
       - Visual Basic for Applications(VBA): útil para criação de macros e conhecida por fazer parte da família do Microsoft Office

   - Outras linguagens supertadas:

     - Javascript
     - Typescript - desenvolvida pela Microsoft
     - Python
     - SQL
     - C++

#### Aula 5

1. .NET X .NET Framework: Qual escolher para minha aplicação?

   - Use .NET quando:

     - Necessitar de plataforma cruzada
     - Há direcionamento de microserviços
       - Azure Service Fabric
       - Azure App Service
     - Uso deDocker
       - Hospedagem em infraestrutura Linux ou Windows
       - Azure Kurbenetes Service
     - Alto desempenho e sistemas escalonáveis
     - Necessidade de versões .NET diferentes por aplicação

   - Use .NET Framework quando:

     - Não houver necessidade de migração para .NET
     - Bibliotecas de terceiros ou pacotes NUGET não são disponíveis para .NET
     - Necessidade de tecnologias não disponíveis para .NET
       - ASP.NET WebForms
       - ASP.NET Web Pages não estão incluídos no ASP.NET Core
       - Implementação do lado servidor para WCF
       - Workflow Foundation, Workflow Services e Workflow Data Services
     - Quando o projeto não suporta determinada linguagem para o caso de Visual Basic e F#
       1. ASP.NET Core
          - Construído para windows, Linux e macOS
          - Criar aplicações com interface via Razor Pages, MVC, Web API, SignaIR
          - Múltiplas versões por máquina
          - Diversas ferramentas de desenvolvimento
          - Maior desempenho
          - Uso do .NET Core runtime
       2. ASP.NET 4.x
          - Para Windows
          - Uso de Web Forms, SignaIR, MVC, Web Api, WebHooks ou Web Pages
          - Única versão por máquina
          - Foco no Visual Studio com C#, F# e VB
          - Bom desempenho no geral
          - Uso do .NET Framework Runtime

     

2. O que usar para cada tipo de aplicação?

   - Aplicações Desktop
     1. Universal Windows Apps
     2. Windows Presentation Foundation ( WPF )
     3. Windows Forms
     4. Xamarin.MAC
   - Aplicações baseadas em containers
     1. Azure: Plataforma de nuvem completa que pode hospedar aplicativos e simplificar o desenvolvimento de novos aplicativos
        - Para aplicações monolíticas > Azure App Service
        - Aplicações com arquiteturas em camadas > Azure Kurbenetes Service ( AKS )
        - Microserviços: AKS ou Azure Web Apps para Containers
        - Funções Serveless e event handlers: Azure Functions
        - Processamento Batch de larga escala: Azure Batch
   - Outros serviços Azure para desenvolvedores
     - Azure SQL: Versão em nuvem do SQL Server
     - Azure Cosmos DB: Banco de dados NoSQL com escalabilidade e de API compatível com MongoDB
     - Azure Blob Storage: Armazenamento em nuvem de arquivos, prezando pela escalabilidade, redundância de dados e disponibilidade
     - Azure Key Vault: Permite o armazenamento em nuvem de segredos de aplicações, como connection strings e chaves de APIs
     - Cognitive Services: Coleção de serviços em nuvem que permite a adição de Inteligência Artificial para aplicações, com funcionalidades como reconhecimento de falar, compreensão de linguagens e detecção de anomalias
   - Aprendizagem de máquina com .NET
     1. ML.NET
        - Framework de aprendizagem de máquina de plataforma cruzada e open source
        - Criação de modelos de aprendizagem de máquina a partir de interface gráfica (Model Builder) ou por meio do ML.NET CLI
        - Integração com outros frameworks famosos como o TensorFlow, ONNX, INFER.NET
     2. Tipos de predições com ML.NET:
        - Classificação e categorização de objetos
        - Predição de valores contínuos
        - Detecção de anomalias
        - Recomendações
        - Análise de sentimento
   - Desenvolvimento de Jogos
     1. Unity: Plataforma de desenvolvimento de jogos 3D e em tempo real, disponível para Windows e MacOS
     2. MonoGame: Framework multiplataforma, open-source com suporte para .NET Core e .NET 4.5
     3. Godot: Game engine gratuita e open-source, para desenvolvimento de jogos usando C#
     4. Stride: Plataforma para desenvolvimento de jogos 2D/3D gratuita, multiplataforma, open source e com editor robusto e gráficos realistas
     5. Wave Engine Mecanismo gratuito para desenvolvimento gráfico voltado para negócios e indústria. Constrói soluções de alta qualidade 3D e 2D
     6. FlatRedBall: Plataforma de desenvolvimento de jogos 2D, construído em cima do MonoGame
     7. CRYENGINE: Framework para desenvolvimento de jogos usando .NET e C#, disponível para Windows e Linux
   - Internet das Coisas (IoT)
     1. Bibliotecas específicas para integração de aplicações com hardware especializado como sensores, dispositivos LCD, conversores analógico-digital
        - System.Device.Gpio
        - Iot.Device.Bindings
     2. Suportado em muitas versões do Linux que suportam ARM/ARM64 e Windows IoT Core
     3. .NET NanoFramework
        - Plataforma gratuita e open-source que permite o desenvolvimento de aplicações com C# acoplados a dispositivos
        - É suportado pela .NET Foundation
        - Utilização do Visual Studio
     4. Meadow
        - Plataforma IoT e full-stack que permite construir soluções focadas para indústria de forma segura e escalável
        - Integrado com Azure
        - Uso no Visual Studio ou VSCode



